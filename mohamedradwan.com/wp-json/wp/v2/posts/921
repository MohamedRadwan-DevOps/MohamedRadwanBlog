{"id":921,"date":"2011-10-16T05:35:57","date_gmt":"2011-10-16T05:35:57","guid":{"rendered":"https:\/\/mohamedradwan.com\/?p=921"},"modified":"2017-08-22T23:14:05","modified_gmt":"2017-08-22T23:14:05","slug":"lambda-expression-func-and-action-delegates","status":"publish","type":"post","link":"https:\/\/mohamedradwan.com\/2011\/10\/16\/lambda-expression-func-and-action-delegates\/","title":{"rendered":"Lambda Expression, Func and Action delegates"},"content":{"rendered":"<hr \/>\n<p>&nbsp;<\/p>\n<p>Finally\u00a0I decide to post this topic, every time I said it&#8217;s not needed because it&#8217;s very simple topic, but I always take time to remember all it&#8217;s details\u00a0specially\u00a0when i get busy with TFS workflow, build automation, deployment automation and all other process automation stuff, when I get back to C# code I take time to\u00a0remember\u00a0these small things, so I decide to post it to be\u00a0remembered\u00a0quickly<\/p>\n<ul>\n<li><strong>Func<\/strong>&lt;&gt;<\/li>\n<\/ul>\n<p>I will start by talking about <span style=\"color: #339966;\">Func<\/span>&lt;&gt; so what is it?<\/p>\n<p>Built-in delegates that take none or one or many parameters and return one result, as we can see we have 16 overloading start from the first one that didn\u2019t take any parameters and return one result and ending with the final one that take 15 parameters and return one result too<\/p>\n<p><a href=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2011\/10\/Func-delegates.png\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-7104\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2011\/10\/Func-delegates.png\" alt=\"\" width=\"690\" height=\"369\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2011\/10\/Func-delegates.png 690w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2011\/10\/Func-delegates-300x160.png 300w\" sizes=\"(max-width: 690px) 100vw, 690px\" \/><\/a><\/p>\n<p>Remember that always the last parameter is the return parameter<\/p>\n<p>Why these delegates exist? because .NET Framework use them in LINQ and Extension method so Microsoft makes them public so that we as developers can use them instead of creating new delegates with the same signature<\/p>\n<ul>\n<li>\u00a0\u00a0<strong>Action<\/strong>&lt;&gt;<\/li>\n<\/ul>\n<p>The same as Func but it doesn\u2019t return value (void)<\/p>\n<p><a href=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2011\/10\/Action-delegates.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-7106\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2011\/10\/Action-delegates.jpg\" alt=\"\" width=\"597\" height=\"337\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2011\/10\/Action-delegates.jpg 597w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2011\/10\/Action-delegates-300x169.png 300w\" sizes=\"(max-width: 597px) 100vw, 597px\" \/><\/a><\/p>\n<ul>\n<li><strong>Lambda Expression<\/strong><\/li>\n<\/ul>\n<p>So let\u2019s see the following example:<\/p>\n<p>[sourcecode language=&#8221;csharp&#8221;]<br \/>\npublic\u00a0static\u00a0int\u00a0MyMethod (Func&lt;int,int&gt;\u00a0del)<br \/>\n{<br \/>\nreturn\u00a0del(4);<br \/>\n}<br \/>\n[\/sourcecode]<\/p>\n<p>So we can see that this method takes a parameter as delegate, that\u2019s mean we will pass a method as a parameter with the same signature of the delegate<\/p>\n<p>So we can make method that take one <span style=\"color: #0000ff;\">int<\/span> and return <span style=\"color: #0000ff;\">int<\/span> as the signature of the <span style=\"color: #339966;\">Func<\/span> (parameter) as the following method<\/p>\n<p>[sourcecode language=&#8221;csharp&#8221;]<br \/>\npublic static int MethodParameter(int x)<br \/>\n{<br \/>\nreturn x += 5;<br \/>\n}<br \/>\n[\/sourcecode]<\/p>\n<p>And then we will path it to our method (MyMethod)<\/p>\n<p>[sourcecode language=&#8221;csharp&#8221;]<br \/>\nMyMethod(MethodParameter))<br \/>\n[\/sourcecode]<\/p>\n<p>But why we create method that we will not use it anymore??? And here the anonymous method will take place, so instead of creating method and pass it to MyMethod we will pass anonymous method with the same signature<\/p>\n<p>So how to write anonymous method with the same signature? it\u2019s very simple, we just write the method and remove the first part until the parameter and write delegate instead of the first part as the following:<\/p>\n<p><a href=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2011\/10\/Anonymous-Method.png\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-7107\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2011\/10\/Anonymous-Method.png\" alt=\"\" width=\"462\" height=\"217\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2011\/10\/Anonymous-Method.png 462w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2011\/10\/Anonymous-Method-300x141.png 300w\" sizes=\"(max-width: 462px) 100vw, 462px\" \/><\/a><\/p>\n<pre class=\"\">\u00a0<span class=\"Apple-style-span\" style=\"font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px; white-space: normal;\">So it will become as the following:\u00a0<\/span>\r\n[sourcecode language=\"csharp\"]\r\ndelegate(int x) { return x += 5; })\r\n[\/sourcecode]<\/pre>\n<p><span class=\"Apple-style-span\" style=\"font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px; white-space: normal;\">So now we can pass the anonymous method to MyMethod as the following:<\/span><\/p>\n<p>[sourcecode language=&#8221;csharp&#8221;]<br \/>\nMyMethod (delegate(int\u00a0x)\u00a0{\u00a0return\u00a0x\u00a0+=\u00a05;\u00a0}));<br \/>\n[\/sourcecode]<\/p>\n<p><span class=\"Apple-style-span\" style=\"font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px; white-space: normal;\">So now we will convert the anonymous method to lambda expression and pass it to MyMethod but first how we can convert anonymous method to lambda expression? It\u2019s very simple<\/span><\/p>\n<p>[sourcecode language=&#8221;csharp&#8221;]<br \/>\n(delegate(int x) { return x += 5; } \/\/ anonymous method<\/p>\n<p>(x)=&gt; { return x += 5; } \/\/ remove delegate and int<\/p>\n<p>x=&gt; { return x += 5; } \/\/ remove Parentheses because one variable<\/p>\n<p>x=&gt; x += 5 \/\/ remove return and curly brackets it&#8217;s one statement like if<br \/>\n[\/sourcecode]<\/p>\n<p><span class=\"Apple-style-span\" style=\"font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px; white-space: normal;\">So now instead of pass anonymous method to MyMethod we will pass the lambda expression of the anonymous method as the following:<\/span><\/p>\n<p>[sourcecode language=&#8221;csharp&#8221;]<br \/>\nMyMethod (x=&gt;\u00a0x\u00a0+=\u00a05));<br \/>\n[\/sourcecode]<\/p>\n<p><span class=\"Apple-style-span\" style=\"font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px; white-space: normal;\"> We don\u2019t need to express the logic of our delegate in the lambda expression. We can as easily call a method, like this:<\/span><\/p>\n<p>[sourcecode language=&#8221;csharp&#8221;]<br \/>\nprod =&gt; EvaluateProduct(prod)<br \/>\n[\/sourcecode]<\/p>\n<p><span class=\"Apple-style-span\" style=\"font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px; white-space: normal;\">If we need a lambda expression for a delegate that has multiple parameters, we must wrap the parameters in parentheses, like this:<\/span><\/p>\n<p>[sourcecode language=&#8221;csharp&#8221;]<br \/>\n(prod, count) =&gt; prod.Price &gt; 20 &amp;&amp; count &gt; 0<br \/>\n[\/sourcecode]<\/p>\n<p><span class=\"Apple-style-span\" style=\"font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px; white-space: normal;\">And finally, if we need logic in the lambda expression that requires more than one statement, we can do so by using braces ({}) and finishing with a return statement, like this:<\/span><\/p>\n<p>[sourcecode language=&#8221;csharp&#8221;]<br \/>\n(prod, count) =&gt; {<\/p>\n<p>\/\/&#8230;multiple code statements<\/p>\n<p>return result;<br \/>\n\/\/ notice here because multiple parameters we have \u00a0Parentheses<br \/>\n\/\/ and also because we have many statements we have curly brackets<\/p>\n<p>}<br \/>\n[\/sourcecode]<\/p>\n<p><span class=\"Apple-style-span\" style=\"font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px; white-space: normal;\"><br \/>\nI hope it helps \ud83d\ude42<\/span><\/p>\n","protected":false},"excerpt":{"rendered":"<p>&nbsp; Finally\u00a0I decide to post this topic, every time I &hellip;<\/p>\n<p class=\"read-more\"> <a class=\"ast-button\" href=\"https:\/\/mohamedradwan.com\/2011\/10\/16\/lambda-expression-func-and-action-delegates\/\"> <span class=\"screen-reader-text\">Lambda Expression, Func and Action delegates<\/span> Read More<\/a><\/p>\n","protected":false},"author":2,"featured_media":7104,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"site-sidebar-layout":"default","site-content-layout":"default","ast-global-header-display":"","ast-banner-title-visibility":"","ast-main-header-display":"","ast-hfb-above-header-display":"","ast-hfb-below-header-display":"","ast-hfb-mobile-header-display":"","site-post-title":"","ast-breadcrumbs-content":"","ast-featured-img":"","footer-sml-layout":"","theme-transparent-header-meta":"","adv-header-id-meta":"","stick-header-meta":"","header-above-stick-meta":"","header-main-stick-meta":"","header-below-stick-meta":"","footnotes":""},"categories":[16,19,20],"tags":[122],"_links":{"self":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts\/921"}],"collection":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/comments?post=921"}],"version-history":[{"count":2,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts\/921\/revisions"}],"predecessor-version":[{"id":7108,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts\/921\/revisions\/7108"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/media\/7104"}],"wp:attachment":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/media?parent=921"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/categories?post=921"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/tags?post=921"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}
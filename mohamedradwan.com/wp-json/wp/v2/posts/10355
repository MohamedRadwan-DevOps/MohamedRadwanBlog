{"id":10355,"date":"2022-02-01T09:07:23","date_gmt":"2022-02-01T09:07:23","guid":{"rendered":"https:\/\/mohamedradwan.com\/?p=10355"},"modified":"2022-07-03T15:27:05","modified_gmt":"2022-07-03T15:27:05","slug":"devops-for-database-development-with-snowflake-using-liquibase-and-azure-devops","status":"publish","type":"post","link":"https:\/\/mohamedradwan.com\/2022\/02\/01\/devops-for-database-development-with-snowflake-using-liquibase-and-azure-devops\/","title":{"rendered":"DevOps for Database Development with Snowflake using Liquibase and Azure DevOps"},"content":{"rendered":"<p>Table of Contents<\/p>\n<p><a href=\"#_Toc85205746\">DevOps for Database Development with Snowflake using Liquibase and Azure DevOps<\/a><\/p>\n<p><a href=\"#_Toc85205747\">Abstract and Introduction<\/a><\/p>\n<p><a href=\"#_Toc85205748\">Updating Database using the Database Configuration Management approach<\/a><\/p>\n<p><a href=\"#_Toc85205749\">Database Configuration Management High Level Workflow<\/a><\/p>\n<p><a href=\"#_Toc85205750\">Database Configuration Management Detailed Level Workflow<\/a><\/p>\n<p><a href=\"#_Toc85205751\">Database Configuration Management Governance Process<\/a><\/p>\n<p><a href=\"#_Toc85205752\">Database Schema Compare<\/a><\/p>\n<p><a href=\"#_Toc85205753\">Database Schema Compare Using Version Control<\/a><\/p>\n<p><a href=\"#_Toc85205754\">Regularly Check for Database Configuration Drift<\/a><\/p>\n<p><a href=\"#_Toc85205755\">Overview about Liquibase and most used commands<\/a><\/p>\n<p><a href=\"#_Toc85205756\">Install Liquibase<\/a><\/p>\n<p><a href=\"#_Toc85205757\">Configure Liquibase and run some commands<\/a><\/p>\n<p><a href=\"#_Toc85205758\">Overview about Snowflake<\/a><\/p>\n<p><a href=\"#_Toc85205759\">Updating Snowflake using Liquibase command line<\/a><\/p>\n<p><a href=\"#_Toc85205760\">Automate Snowflake deployment using Azure Pipeline<\/a><\/p>\n<h1><a name=\"_Toc85205746\"><\/a>DevOps for Database Development with Snowflake using Liquibase and Azure DevOps<\/h1>\n<h2><\/h2>\n<h2><a name=\"_Toc85205747\"><\/a>Abstract and Introduction<\/h2>\n<p>DevOps empowers your organization to be more responsive, enabling you to delight your customers and stakeholders by delivering the value they want faster\u2014not just once, but consistently and sustainably. No matter what your primary business may be, it runs on software, and using DevOps to accelerate your software delivery and improve application quality is a key step to sustained profitability.<\/p>\n<p>When it comes to databases development, we must apply the same principles and practices in order to achieve the same result, in this post, I will explain in detail how you can apply DataOps or DevOps for Snowflake database using Azure DevOps and Liquibase, but first, let\u2019s understand some the most important best practices and considerations that you must take into account.<\/p>\n<h2><a name=\"_Toc85205748\"><\/a>Updating Database using the Database Configuration Management approach<\/h2>\n<p><a href=\"https:\/\/mohamedradwan.com\/?attachment_id=10357\" rel=\"attachment wp-att-10357\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-large wp-image-10357\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Update-Database-with-CICD-1024x544.png\" alt=\"Update Database with CICD\" width=\"760\" height=\"404\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Update-Database-with-CICD-1024x544.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Update-Database-with-CICD-300x159.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Update-Database-with-CICD-768x408.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Update-Database-with-CICD-1536x816.png 1536w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Update-Database-with-CICD.png 1872w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><\/a><\/p>\n<p>Figure 1: Update Database with CI\/CD<\/p>\n<p>When working with database development, there are some important considerations to take into account.<\/p>\n<ul>\n<li>Developer should no longer use either the user interface or code to update the database directly. Doing so will prevent tracking the changes as well as deploying those changes to other environments.<\/li>\n<\/ul>\n<ul>\n<li>Instead of updating the database directly, the database must be updated based on changes made by the Database Configuration Management (DCM) tool, version control and the Continuous Integration\/Continuous Deployment (CI\/CD) pipelines.<\/li>\n<\/ul>\n<h2><a name=\"_Toc83897915\"><\/a><a name=\"_Toc85205749\"><\/a>Database Configuration Management High Level Workflow<\/h2>\n<p><a href=\"https:\/\/mohamedradwan.com\/2022\/02\/01\/devops-for-database-development-with-snowflake-using-liquibase-and-azure-devops\/database-configuration-management-high-level-workflow\/\" rel=\"attachment wp-att-10359\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-large wp-image-10359\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Database-Configuration-Management-High-Level-Workflow-1024x567.png\" alt=\"\" width=\"760\" height=\"421\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Database-Configuration-Management-High-Level-Workflow-1024x567.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Database-Configuration-Management-High-Level-Workflow-300x166.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Database-Configuration-Management-High-Level-Workflow-768x425.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Database-Configuration-Management-High-Level-Workflow.png 1040w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><\/a><\/p>\n<p>Figure 2: Database update high-level workflow<\/p>\n<p>Before any new changes are pushed to version control on the remote repository, every developer should always get the latest changes. This is essential to ensure the new changes are aligned with the last changes pushed by other developers.<\/p>\n<p>Developers start editing database scripts with the DCM after they pulled the last changes from the remote repository.<\/p>\n<p>Once developers are ready, they will push their changes to the remote repository.<\/p>\n<p><strong>\u00a0<\/strong><\/p>\n<p>After the new changes are committed and pushed to the remote repository, a CI\/CD pipeline will start running, getting the latest changes on the build agent and start executing database create or update changes.<\/p>\n<p>Developers should never update the database directly. All updates should come from version control and the CI\/CD process. This will be managed through permissions so that only the CI\/CD process uses the service account that has updated permissions.<\/p>\n<p>Direct update permissions can only be used for exceptions to resolve an issue that cannot be resolved following the process above.<\/p>\n<h2><a name=\"_Toc83897916\"><\/a><a name=\"_Toc85205750\"><\/a>Database Configuration Management Detailed Level Workflow<\/h2>\n<p><a href=\"https:\/\/mohamedradwan.com\/2022\/02\/01\/devops-for-database-development-with-snowflake-using-liquibase-and-azure-devops\/database-configuration-management-detailed-level-workflow\/\" rel=\"attachment wp-att-10361\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-10361\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Database-Configuration-Management-Detailed-Level-Workflow.png\" alt=\"Database Configuration Management Detailed Level Workflow\" width=\"894\" height=\"562\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Database-Configuration-Management-Detailed-Level-Workflow.png 894w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Database-Configuration-Management-Detailed-Level-Workflow-300x189.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Database-Configuration-Management-Detailed-Level-Workflow-768x483.png 768w\" sizes=\"(max-width: 894px) 100vw, 894px\" \/><\/a><\/p>\n<p>Figure 3: Database update detailed level workflow<\/p>\n<p>Developers making changes to the database should follow the detailed level configuration management workflow as follows:<\/p>\n<ul>\n<li><strong>Every developer has their own local database<\/strong><\/li>\n<\/ul>\n<p>Every developer will have their own database called a local or target database. They use this database to develop\/deploy new changes and usually, this database is updated using DCM or direct update.<\/p>\n<ul>\n<li><strong>There is only one integration database<\/strong><\/li>\n<\/ul>\n<p>There is only one integration database for all developers. It is also known as source database\/dev environment or master database. This database is only updated from version control and the CI\/CD process.<\/p>\n<ul>\n<li><strong>Developers start by comparing their local database to integration database<\/strong><\/li>\n<\/ul>\n<p>The process starts with a database comparison between the local database and the integration database. If the compare result shows changes in the integration database, there are new changes that have been pushed by other developers to the integration database through version control and CI\/CD.<\/p>\n<ul>\n<li><strong>Developers pull the changes for the integration database<\/strong><\/li>\n<\/ul>\n<p>As the integration database is only updated from version control and CI\/CD, if there are any changes in the integration database which do not exist locally, these will be mapped to changes in version control. Developers therefore must pull those changes from the remote repository and adjust their code accordingly.<\/p>\n<ul>\n<li><strong>Developer pushes the changes to the remote repository<\/strong><\/li>\n<\/ul>\n<p>Once developers are happy with their changes, they can push them to the remote repository, updating it with the latest changes required to update the integration database.<\/p>\n<ul>\n<li><strong>CI\/CD runs to apply the changes to the integration database <\/strong><\/li>\n<\/ul>\n<p>Once the new changes are pushed to the remote repository, the CI\/CD will run to apply those changes to the integration database.<\/p>\n<ul>\n<li><strong>Updating Test, UAT, Pre-Prod, and Production <\/strong><\/li>\n<\/ul>\n<p>Updating the other environments should follow the same process. Updates are only made from version control and CI\/CD but these will be based on different branches of the repository. This will be explained in more detail in the Branch and Merge Governance Process section below.<\/p>\n<h2><a name=\"_Toc83897917\"><\/a><a name=\"_Toc85205751\"><\/a>Database Configuration Management Governance Process<\/h2>\n<p>In order to apply governance to the database configuration management update process, specific user access control and permissions will be applied to different roles.<\/p>\n<p>For example:<\/p>\n<ul>\n<li>The developer role will not have edit\/update access to any database environment except their local\/target database.<\/li>\n<li>The DevOps role will have edit\/update permissions for all databases.<\/li>\n<li>The CI\/CD process will be configured to run using a service account that has edit\/update permission.<\/li>\n<\/ul>\n<p>Direct edit\/update permissions can only be used for exceptions to resolve an issue that cannot be resolved following the process above.<\/p>\n<h2><a name=\"_Toc83897918\"><\/a><\/h2>\n<h2><a name=\"_Toc85205752\"><\/a>Database Schema Compare<a name=\"_Toc83897919\"><\/a><\/h2>\n<ul>\n<li><strong>The Need for Database Schema Compare<\/strong><\/li>\n<\/ul>\n<p>Developers need to compare their local database with the integration database or any other databases for other environments. The reason for the comparison is to understand the changes that have been applied for each environment.<\/p>\n<ul>\n<li><a name=\"_Toc83897920\"><\/a> <strong>Database Schema Compare Using DCM<\/strong><\/li>\n<\/ul>\n<p>Developers can compare their local database to the integration database (or any other database for other environments) using the DCM configuration. In the DCM there is an option to identify which database will be the target (local) database and which one will be the source (integration) database and you can change or override these as needed.<\/p>\n<p>The following example (figure 4) shows the result of a schema comparison using DCM (Liquibase) and there are 6 missing tables.<\/p>\n<p><a href=\"https:\/\/mohamedradwan.com\/2022\/02\/01\/devops-for-database-development-with-snowflake-using-liquibase-and-azure-devops\/database-schema-compare-using-dcm\/\" rel=\"attachment wp-att-10362\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-large wp-image-10362\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Database-Schema-Compare-Using-DCM-1024x631.png\" alt=\"\u2022 Database Schema Compare Using DCM\" width=\"760\" height=\"468\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Database-Schema-Compare-Using-DCM-1024x631.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Database-Schema-Compare-Using-DCM-300x185.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Database-Schema-Compare-Using-DCM-768x473.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Database-Schema-Compare-Using-DCM.png 1286w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><\/a><\/p>\n<p>Figure 4: Schema compare using DCM (Liquibase)<\/p>\n<h2><a name=\"_Toc83897921\"><\/a><a name=\"_Toc85205753\"><\/a>Database Schema Compare Using Version Control<\/h2>\n<p>Since all databases for all environments can only be updated from version control and CI\/CD, the database schema comparison can be done using version control as well as the DCM tool. This is so we can use version control to understand what changes have been applied to which environment.<\/p>\n<p>The result should be always the same. If the version control shows a different result from the DCM tool for the actual database, there has been configuration drift meaning someone has broken the process and updated the database directly without updating the version control and the CI\/CD.<\/p>\n<p>The following example (figure 5) shows the result of the schema compare using version control (git) and there are 6 missing tables which is the same compare results as the DCM in the previous example. So, this comparison shows that there is no configuration drift between version control and the actual database.<\/p>\n<p>Figure 5: Schema compare using version control (git)<\/p>\n<h2><a name=\"_Toc83897922\"><\/a><a name=\"_Toc85205754\"><\/a>Regularly Check for Database Configuration Drift<\/h2>\n<p>The database must be checked for configuration drift on a regular basis. To do that, we need to compare the database schema using version control and also using the DCM tool and make sure the compared results are the same.<\/p>\n<p>If there is any configuration drift, it should be investigated to understand how the process was broken and why.<\/p>\n<h2><a name=\"_Toc85205755\"><\/a>Overview about Liquibase and most used commands<\/h2>\n<p><a href=\"https:\/\/www.liquibase.org\/\">Liquibase<\/a> is an open-source database schema change management solution that\u00a0enables you to manage revisions of your database changes easily. Below are listed several of the most used commands:<\/p>\n<ul>\n<li><strong>liquibase diff\u00a0<\/strong>is used to compare the target (local) database with the source (integration) database. After using this command the following data will be listed: missing column(s), unexpected column(s) and changed column(s). If there are some columns to be shown they will be listed, if there isn\u2019t None will be shown. In missing columns will be listed columns that are present in the integration database but not in the target database. Unexpected columns are the ones that are present in the local database but not in the integration database.<\/li>\n<li><strong>liquibase status \u2013verbose<\/strong>identifies the changeset in the changelog which is not yet executed in the target\/local database and shows its details.<\/li>\n<li><strong>liquibase diff -changelog\u00a0<\/strong>is used in order to generate a changelog file, which will include every diff element as a changeset with auto generated number. The generated changelog will be based on the schema compared between the local database and the integration database.<\/li>\n<\/ul>\n<h2><a name=\"_Toc85205756\"><\/a>Install Liquibase<\/h2>\n<p>In order to download the Liquibase, navigate to\u00a0<a href=\"https:\/\/www.liquibase.org\/download\">https:\/\/www.liquibase.org\/download<\/a>\u00a0page. Also, a snowflake driver is needed, in my case <strong>JDBC<\/strong> the latest version, which I downloaded from\u00a0<a href=\"https:\/\/repo1.maven.org\/maven2\/net\/snowflake\/snowflake-jdbc\/\">this<\/a> page. Also, an extension is needed in order for Liquibase to communicate with Snowflake.<\/p>\n<p>Don\u2019t forget to put both jar drivers into the Liquibase lib folder.<\/p>\n<p>The next step is to update the environment variable.<\/p>\n<p>Set the path user variable and the path system variable to point to the Liquibase location(C:\/Program Files\/Liquibase).<\/p>\n<p>Type \u2018liquibase\u2019 from the git bash or from the command line in order to check if the Liquibase is installed correctly (all commands that can be used should be listed).<\/p>\n<p><a href=\"https:\/\/mohamedradwan.com\/2022\/02\/01\/devops-for-database-development-with-snowflake-using-liquibase-and-azure-devops\/check-that-liquibase-is-installed\/\" rel=\"attachment wp-att-10364\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-large wp-image-10364\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/check-that-Liquibase-is-installed-1024x632.png\" alt=\"check that Liquibase is installed\" width=\"760\" height=\"469\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/check-that-Liquibase-is-installed-1024x632.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/check-that-Liquibase-is-installed-300x185.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/check-that-Liquibase-is-installed-768x474.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/check-that-Liquibase-is-installed.png 1286w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><\/a><\/p>\n<p>Figure 6: check that Liquibase is installed<\/p>\n<h2><a name=\"_Toc85205757\"><\/a>Configure Liquibase and run some commands<\/h2>\n<p>There is an example that comes with the Liquibase installation itself, which can be found in <strong>SQL<\/strong> and <strong>XML<\/strong> as a language for tracking the changes.<\/p>\n<p>The example of the changelog for <strong>SQL<\/strong> inside the <strong>SQL<\/strong> folder, which lists the name and the unique id of the sequence.<\/p>\n<p>In the liquibase.properties file has listed the database that is used, the type of the database, and also the name of the changelog file. Liquibase supports various databases, for example, PostgreSQL, Oracle, SQL Server, H2, Azure SQL, Snowflake etc. In the properties file is listed the type of both databases used (in this case . Snowflake and .sql). Also, the username and the password of the database are listed, the reference URL of the integration database with its username and password.<\/p>\n<p>Next thing, start the local\/dev database and integration database and run git bash.<\/p>\n<p>Navigate to the location of the changelog and run\u00a0<strong>liquibase status<\/strong>\u00a0command. By running this command, it will be displayed what is inside the changelog which is not yet committed or applied to the local database.<\/p>\n<p><a href=\"https:\/\/mohamedradwan.com\/?attachment_id=10365\" rel=\"attachment wp-att-10365\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-large wp-image-10365\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/The-structure-of-changelog-file-1024x583.png\" alt=\"The structure of changelog file\" width=\"760\" height=\"433\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/The-structure-of-changelog-file-1024x583.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/The-structure-of-changelog-file-300x171.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/The-structure-of-changelog-file-768x437.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/The-structure-of-changelog-file.png 1207w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><\/a><\/p>\n<p>Figure 7: The structure of the changelog file<\/p>\n<p>By running the\u00a0<strong>verbose\u00a0<\/strong>command, the details of the changeset will be displayed (the name of the developer, the number of the changeset, and more details about the changes).<\/p>\n<p>By running\u00a0<strong>liquibase update<\/strong>\u00a0command, all changes that are not applied to the target or local database will be taken and the local database will be updated. After running this command the integration database will be empty, but the local or target database will have the changes.<\/p>\n<p>Besides the regular tables in the database, there is also a very important database table called database changelog which tracks all previously applied changesets. For each change, there is an id of the change set, author, filename, date when the change is executed, description, comments, and several other details.<\/p>\n<p>By running the\u00a0<strong>state<\/strong>\u00a0command again could be checked if the database is up to date and if all the changes are already applied to the local database.<\/p>\n<p>By running the\u00a0<strong>liquibase diff\u00a0<\/strong>command can be seen the schema compare between the local database and the integration database.<\/p>\n<p>All items that are unexpected will be listed since the comparison is from the integration database to the local database. If the comparison is made from the local database to integration database, then the same items will be listed but this time as missing.<\/p>\n<h2><a name=\"_Toc85205758\"><\/a>Overview about Snowflake<\/h2>\n<p>Snowflake is a cloud-based data storage and analytics service generally termed \u201cData Warehouse-as-a-Service (DaaS)\u201d. It allows corporate users to store and analyze data using cloud-based hardware and software. In simple words, it is just a cloud solution for databases with business intelligence and a data warehouse.<\/p>\n<p>There are several types of Snowflake Objects divided into two groups: Account Level Objects and Schema Level Objects. Account Level Objects are the following:<\/p>\n<ul>\n<li>User<\/li>\n<li>Role<\/li>\n<li>Grants<\/li>\n<li>Warehouse<\/li>\n<li>Resource Monitor<\/li>\n<li>Integration<\/li>\n<li>Database<\/li>\n<\/ul>\n<p>And Schema Level objects are:<\/p>\n<ul>\n<li>Table<\/li>\n<li>External Table<\/li>\n<li>View<\/li>\n<li>Stream<\/li>\n<li>Task<\/li>\n<li>Stored Procedure<\/li>\n<li>UDF<\/li>\n<li>Sequence<\/li>\n<li>Stage<\/li>\n<li>File Format<\/li>\n<li>Pipe<\/li>\n<\/ul>\n<p>Recommended is to have a separation between how are managed the Account Level Objects and how are managed the Schema Level Objects.<\/p>\n<p>For example, the Account Level Objects can be managed using infrastructure as code as Terraform configured also with CI\/CD pipeline.<\/p>\n<p>The other side is the Schema Level Objects to be managed with proper DCM or Database Configuration Management tool<\/p>\n<p><a href=\"https:\/\/mohamedradwan.com\/?attachment_id=10366\" rel=\"attachment wp-att-10366\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-large wp-image-10366\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/The-separation-of-Account-level-and-Schema-level-objects-1024x578.png\" alt=\"The separation of Account level and Schema level objects\" width=\"760\" height=\"429\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/The-separation-of-Account-level-and-Schema-level-objects-1024x578.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/The-separation-of-Account-level-and-Schema-level-objects-300x169.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/The-separation-of-Account-level-and-Schema-level-objects-768x434.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/The-separation-of-Account-level-and-Schema-level-objects.png 1208w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><\/a><\/p>\n<p>Figure 8: The separation of Account level and Schema level objects<\/p>\n<h2><a name=\"_Toc85205759\"><\/a>Updating Snowflake using Liquibase command line<\/h2>\n<p>In the next example, since we are using Snowflake, we must first have the Snowflake extension for Liquibase and the driver also. When navigating to Snowflake you will notice that there is already a Snowflake sample data that comes with the Snowflake account and it is free for 30 days. Snowflake sample database has several schemas and, in this example, I will use it in order to create three databases: dev1_dev, dev2_dev, and server integration with the default public schema.<\/p>\n<p>Simultaneously should be created an Azure DevOps Project with a repository and copied an empty clone.<\/p>\n<p>First, we are going to work with the developer one, so we should navigate to dev1 repos and run git bash as dev1.<\/p>\n<p>Next in git bash navigate to dev1 repository and clone the remote repo into our local git repository, which now is an empty repo.<\/p>\n<p><a href=\"https:\/\/mohamedradwan.com\/?attachment_id=10367\" rel=\"attachment wp-att-10367\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-large wp-image-10367\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Clone-the-remote-repo-on-Azure-DevOps-1024x379.png\" alt=\"Clone the remote repo on Azure DevOps\" width=\"760\" height=\"281\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Clone-the-remote-repo-on-Azure-DevOps-1024x379.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Clone-the-remote-repo-on-Azure-DevOps-300x111.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Clone-the-remote-repo-on-Azure-DevOps-768x285.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Clone-the-remote-repo-on-Azure-DevOps-1536x569.png 1536w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Clone-the-remote-repo-on-Azure-DevOps.png 1792w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><\/a><\/p>\n<p>Figure 9: Clone the remote repo on Azure DevOps<\/p>\n<p>Next, we should add the liquibase property file there. In the property, the file is listed the target\/local database and also the integration\/source database. Also is listed the type of database which is Snowflake and the database language which is SQL. But in this example, I like to use the sample database of Snowflake, so I will comment the current integration database and uncomment the sample database of Snowflake and of course save the file.<\/p>\n<p>Next, I will compare my local database and the sample of Snowflake. In git bash, I will run the <strong>liquibase status<\/strong>\u00a0command which will give as a result that the changelog does not exist.<\/p>\n<p>Next by running the\u00a0<strong>liquibase diff<\/strong>\u00a0command we can see the comparison between the sample database of snowflake and the dev1 database. All changes here will be shown as missing changes.<\/p>\n<p>Next, we need to make a changelog with all these changes so we can deploy them to the dev1 database. Generating the changelog file we can do with running the command\u00a0<strong>snowflake diff-changelog<\/strong>.<\/p>\n<p>Next, I will uncomment the integration database and comment the snowflake sample database since we already pulled the schema. After changing the properties file, if we run the\u00a0<strong>liquibase status<\/strong>\u00a0command, the 25 changesets in the local changelog which are not applied yet to the local database will be shown.<\/p>\n<p>If we run\u00a0<strong>liquibase status \u2013verbose<\/strong>\u00a0command we can see the details of the changelog. If we run\u00a0<strong>liquibase update\u00a0<\/strong>command all changes will be applied to the local dev1 database.<\/p>\n<p>So currently the changes are in the local repository, but still not in the remote repository which we created earlier.<\/p>\n<p>Since liquibase property file should not be part of the source control, a gitignore should be created in order to ignore this file.<\/p>\n<p><a href=\"https:\/\/mohamedradwan.com\/2022\/02\/01\/devops-for-database-development-with-snowflake-using-liquibase-and-azure-devops\/gitignore-file-to-ignore-liquibase-properties-file\/\" rel=\"attachment wp-att-10368\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-large wp-image-10368\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Gitignore-file-to-ignore-Liquibase-properties-file-1024x409.png\" alt=\"Gitignore file to ignore Liquibase properties file\" width=\"760\" height=\"304\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Gitignore-file-to-ignore-Liquibase-properties-file-1024x409.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Gitignore-file-to-ignore-Liquibase-properties-file-300x120.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Gitignore-file-to-ignore-Liquibase-properties-file-768x307.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Gitignore-file-to-ignore-Liquibase-properties-file-750x300.png 750w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Gitignore-file-to-ignore-Liquibase-properties-file.png 1207w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><\/a><\/p>\n<p>Figure 10: Gitignore file to ignore Liquibase properties file<\/p>\n<h2><a name=\"_Toc85205760\"><\/a>Automate Snowflake deployment using Azure Pipeline<\/h2>\n<p>Next the changelog should be committed to the local repository. After that we should just push all the branches to the remote repository.<\/p>\n<p>In Azure DevOps, I configured an Azure pipeline to automate the deployment.<\/p>\n<p>When clicking on edit on the pipeline we can see the Update Snowflake.<\/p>\n<p><a href=\"https:\/\/mohamedradwan.com\/?attachment_id=10369\" rel=\"attachment wp-att-10369\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-large wp-image-10369\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Configure-Azure-Pipeline-to-deploy-snowflake-1024x458.png\" alt=\"Configure Azure Pipeline to deploy snowflake \" width=\"760\" height=\"340\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Configure-Azure-Pipeline-to-deploy-snowflake-1024x458.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Configure-Azure-Pipeline-to-deploy-snowflake-300x134.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Configure-Azure-Pipeline-to-deploy-snowflake-768x343.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Configure-Azure-Pipeline-to-deploy-snowflake-1536x686.png 1536w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Configure-Azure-Pipeline-to-deploy-snowflake-2048x915.png 2048w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><\/a><\/p>\n<p>Figure 11: Configure Azure Pipeline to deploy snowflake<\/p>\n<p>I will run the pipeline in order to get all the changes in the version control and apply the changes in the Snowflake integration database.<\/p>\n<p>After running the pipeline, all the schema and tables will be present in the integration database.<\/p>\n<p><a href=\"https:\/\/mohamedradwan.com\/2022\/02\/01\/devops-for-database-development-with-snowflake-using-liquibase-and-azure-devops\/azure-pipeline-run-and-update-snowflake\/\" rel=\"attachment wp-att-10370\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-large wp-image-10370\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Azure-Pipeline-run-and-update-Snowflake-1024x782.png\" alt=\"Azure Pipeline run and update Snowflake \" width=\"760\" height=\"580\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Azure-Pipeline-run-and-update-Snowflake-1024x782.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Azure-Pipeline-run-and-update-Snowflake-300x229.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Azure-Pipeline-run-and-update-Snowflake-768x587.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Azure-Pipeline-run-and-update-Snowflake-1536x1173.png 1536w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2022\/01\/Azure-Pipeline-run-and-update-Snowflake.png 1940w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><\/a><\/p>\n<p>Figure 12: Azure Pipeline run and update Snowflake<\/p>\n<p>Remember, the integration database always must be updated from CI\/CD and version control and never to be updated directly.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Table of Contents DevOps for Database Development with Snowflake using &hellip;<\/p>\n<p class=\"read-more\"> <a class=\"ast-button\" href=\"https:\/\/mohamedradwan.com\/2022\/02\/01\/devops-for-database-development-with-snowflake-using-liquibase-and-azure-devops\/\"> <span class=\"screen-reader-text\">DevOps for Database Development with Snowflake using Liquibase and Azure DevOps<\/span> Read More<\/a><\/p>\n","protected":false},"author":1,"featured_media":10373,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"site-sidebar-layout":"default","site-content-layout":"default","ast-global-header-display":"","ast-banner-title-visibility":"","ast-main-header-display":"","ast-hfb-above-header-display":"","ast-hfb-below-header-display":"","ast-hfb-mobile-header-display":"","site-post-title":"","ast-breadcrumbs-content":"","ast-featured-img":"","footer-sml-layout":"","theme-transparent-header-meta":"","adv-header-id-meta":"","stick-header-meta":"","header-above-stick-meta":"","header-main-stick-meta":"","header-below-stick-meta":"","footnotes":""},"categories":[16,974],"tags":[960,1073,205,1075,1074],"_links":{"self":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts\/10355"}],"collection":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/comments?post=10355"}],"version-history":[{"count":4,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts\/10355\/revisions"}],"predecessor-version":[{"id":10591,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts\/10355\/revisions\/10591"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/media\/10373"}],"wp:attachment":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/media?parent=10355"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/categories?post=10355"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/tags?post=10355"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}
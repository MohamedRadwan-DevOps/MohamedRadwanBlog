{"id":574,"date":"2010-05-07T22:05:24","date_gmt":"2010-05-07T22:05:24","guid":{"rendered":"https:\/\/mohamedradwan.com\/?p=30"},"modified":"2017-08-30T21:47:50","modified_gmt":"2017-08-30T21:47:50","slug":"30-2","status":"publish","type":"post","link":"https:\/\/mohamedradwan.com\/2010\/05\/07\/30-2\/","title":{"rendered":"Adapter Pattern"},"content":{"rendered":"<div class=\"ast-oembed-container\" style=\"height: 100%;\"><iframe loading=\"lazy\" title=\"Adapter and Factory Pattern\" width=\"500\" height=\"375\" src=\"https:\/\/www.youtube.com\/embed\/fXeBw7yFGnE?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe><\/div>\n<p><span style=\"font-size: large;\"><br \/>\n<\/span><strong>Summary<\/strong>.<\/p>\n<hr \/>\n<p>Adapter pattern Convert the interface of a class into another interface clients expect.<br \/>\nAdapter lets classes work together that couldn&#8217;t otherwise because of incompatible interfaces.<br \/>\nAlso known as Wrapper<\/p>\n<p><strong>Example and reasons.<\/strong><br \/>\nDot Net library, we cannot change the library interface, since we may not have its source code<br \/>\nEven if we did have the source code, we probably should not change the library for each domain-specific application<\/p>\n<p><strong>Solution<br \/>\n<\/strong>We will create our adapter for our domain that adapts the interface to match our needed interface.<br \/>\nParticipants<br \/>\n\u2022\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Target<br \/>\n\u2022\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Adapter<br \/>\n\u2022\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Adaptee<br \/>\n\u2022\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Client<br \/>\n\u2022\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Factory<br \/>\n<strong>Class adapters<br \/>\n<\/strong>\u2022\u00a0\u00a0\u00a0\u00a0 Simple and invisible to the client.<br \/>\n\u2022\u00a0\u00a0\u00a0\u00a0 A class adapter has instance of an interface and inherits a class.<br \/>\n\u2022\u00a0\u00a0\u00a0\u00a0 Overriding behavior can be done more easily with a Class adapter<br \/>\n<strong>Use the Adapter pattern when you want to:<\/strong><br \/>\n\u2022\u00a0\u00a0\u00a0\u00a0 Create a reusable class to cooperate with yet-to-be-built classes.<br \/>\n\u2022\u00a0\u00a0\u00a0\u00a0 Change the names of methods as called and as implemented.<br \/>\n\u2022\u00a0\u00a0\u00a0\u00a0 Use an existing class, and its interface does not match the one you need.<\/p>\n<p><a href=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2010\/05\/image001.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-7366\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2010\/05\/image001.jpg\" alt=\"image001\" width=\"600\" height=\"397\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2010\/05\/image001.jpg 600w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2010\/05\/image001-300x199.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p><strong>Classes<\/strong><\/p>\n<p>public class Client1<br \/>\n{<br \/>\npublic void AnyMethod()<br \/>\n{<br \/>\n\/\/Target t = Factory.CreateTarget();<br \/>\nTarget t = new Target();<br \/>\n\/\/Client1 use the the target interface &#8220;Request&#8221;<br \/>\nt.Request();<br \/>\n}<br \/>\n}<\/p>\n<p>public class Target<br \/>\n{<br \/>\npublic virtual void Request()<br \/>\n{<br \/>\nConsole.WriteLine(&#8220;Called Target Request()&#8221;);<br \/>\n}<br \/>\n}<\/p>\n<p>public class Adapter : Target<br \/>\n{<br \/>\nprivate Adaptee _adaptee = new Adaptee();<br \/>\npublic override void Request()<br \/>\n{<br \/>\n\/\/ Possibly do some other work<br \/>\n\/\/\u00a0 and then call SpecificRequest<br \/>\n_adaptee.SpecificRequest();<br \/>\n}<br \/>\n}<\/p>\n<p>public class Adaptee<br \/>\n{<br \/>\npublic void SpecificRequest()<br \/>\n{<br \/>\nConsole.WriteLine(&#8220;Called SpecificRequest()&#8221;);<br \/>\n}<br \/>\n}<br \/>\npublic class Factory<br \/>\n{<br \/>\npublic static Target CreateTarget()<br \/>\n{<br \/>\nreturn new Adapter();<br \/>\n\/\/or<br \/>\n\/\/return new Target();<br \/>\n}<br \/>\n}<\/p>\n<p>Thanks<br \/>\nM.Radwan<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Adapter pattern Convert the interface of a class into another interface clients expect.<br \/>\nAdapter lets classes work together that couldn&#8217;t otherwise because of incompatible interfaces.<br \/>\nAlso known as Wrapper<\/p>\n","protected":false},"author":2,"featured_media":7366,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"site-sidebar-layout":"default","site-content-layout":"default","ast-global-header-display":"","ast-banner-title-visibility":"","ast-main-header-display":"","ast-hfb-above-header-display":"","ast-hfb-below-header-display":"","ast-hfb-mobile-header-display":"","site-post-title":"","ast-breadcrumbs-content":"","ast-featured-img":"","footer-sml-layout":"","theme-transparent-header-meta":"","adv-header-id-meta":"","stick-header-meta":"","header-above-stick-meta":"","header-main-stick-meta":"","header-below-stick-meta":"","footnotes":""},"categories":[16,21],"tags":[],"_links":{"self":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts\/574"}],"collection":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/comments?post=574"}],"version-history":[{"count":5,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts\/574\/revisions"}],"predecessor-version":[{"id":7368,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts\/574\/revisions\/7368"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/media\/7366"}],"wp:attachment":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/media?parent=574"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/categories?post=574"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/tags?post=574"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}
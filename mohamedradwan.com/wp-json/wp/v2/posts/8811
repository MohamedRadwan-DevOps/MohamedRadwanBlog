{"id":8811,"date":"2019-01-13T23:35:42","date_gmt":"2019-01-13T23:35:42","guid":{"rendered":"https:\/\/mohamedradwan.com\/?p=8811"},"modified":"2019-07-08T06:55:58","modified_gmt":"2019-07-08T06:55:58","slug":"whats-new-in-c-8-0","status":"publish","type":"post","link":"https:\/\/mohamedradwan.com\/2019\/01\/13\/whats-new-in-c-8-0\/","title":{"rendered":"What\u2019s new in C# 8.0"},"content":{"rendered":"<p><a href=\"#_Toc500069570\">Introduction<\/a><br \/>\n<a href=\"#_Toc500069571\">Null reference types <\/a><br \/>\n<a href=\"#_Toc500069572\">Async streams<\/a><br \/>\n<a href=\"#_Toc500069573\">Range syntax<\/a><br \/>\n<a href=\"#_Toc500069574\">Recursive patterns<\/a><br \/>\n<a href=\"#_Toc500069575\">Implicitly typed new \u2013 expressions<\/a><br \/>\n<a href=\"#_Toc500069576\">Default Interface members<\/a><br \/>\n<a href=\"#_Toc500069577\">Conclusion<\/a><\/p>\n<h2><a name=\"_Toc500069570\"><\/a>Introduction<\/h2>\n<p>In this post I am going to share some of the major features that are coming into <a href=\"https:\/\/blogs.msdn.microsoft.com\/dotnet\/2018\/12\/05\/take-c-8-0-for-a-spin\/\" target=\"_blank\" rel=\"noopener noreferrer\">C# 8.<\/a> So far, all the new language features introduced in minor language versions of C# were designed so as not to have a large impact on the language. These features are mostly syntactic improvements and small additions to the new features introduced in C# 7.0.<\/p>\n<h2><a name=\"_Toc500069571\"><\/a>Null reference types<\/h2>\n<p>It would be nice if you have known ahead of a time about null reference exception, not when your customer send the exception in the bug report. That is what a null reference types are about as a feature. Essentially, null reference types are about solving the problem of finding out where null should be, where they should not be, tracking where they will be or will not be. I am going to show you how to enable null reference types feature for the whole project in the source code. After enabling, it will give new warnings in existing code. Activate it by typing \u201c#nullable enable\u201d(image 1).<\/p>\n<figure id=\"attachment_8814\" aria-describedby=\"caption-attachment-8814\" style=\"width: 760px\" class=\"wp-caption alignnone\"><img loading=\"lazy\" decoding=\"async\" class=\"size-large wp-image-8814\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-1-Nullable-enable-1024x578.png\" alt=\"Image 1 - Nullable enable\" width=\"760\" height=\"429\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-1-Nullable-enable-1024x578.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-1-Nullable-enable-300x169.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-1-Nullable-enable-768x433.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-1-Nullable-enable.png 1372w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><figcaption id=\"caption-attachment-8814\" class=\"wp-caption-text\">Image 1 &#8211; Nullable enable<\/figcaption><\/figure>\n<p>When you turn this feature on forever more in C#, all your reference types will be considered to be non nullable.<\/p>\n<p>&nbsp;<\/p>\n<p class=\"gray\"><span class=\"ion-video\">Video<\/span>You can see <strong><a href=\"https:\/\/www.youtube.com\/watch?v=vev3Czaa1pA\">this video<\/a><\/strong>, if you would like to find more information about a walkthrough introducing the Release Management and Build Automation using TFS 2017\/2015. Step by step about all process, starting from creating the project, check in the code in the source control, create a build definition and trigger the build, and also create a release pipeline. Learn how to configure properly the build steps, including Copy Files and Publish Build Artifacts. See how to create new release definition, add environments and link to build definition. Afterwards see how to add tasks to the release definition, like Windows Machine File Copy and configure it properly.<\/p>\n<p>&nbsp;<\/p>\n<h2><a name=\"_Toc500069572\"><\/a>Async streams<\/h2>\n<p>Async streams is an ability to have enumerators that support async operations. Including new <a href=\"https:\/\/docs.microsoft.com\/en-us\/dotnet\/api\/microsoft.servicefabric.data.iasyncenumerable-1?view=azure-dotnet\" target=\"_blank\" rel=\"noopener noreferrer\">IAsyncEnumerable <\/a>and <a href=\"https:\/\/docs.microsoft.com\/en-us\/dotnet\/api\/microsoft.servicefabric.data.iasyncenumerator-1?view=azure-dotnet\" target=\"_blank\" rel=\"noopener noreferrer\">IAsyncEnumerator <\/a>interfaces. The language lets you await foreach over these to consume their elements, and yield return to them to produce elements. It allows an async method to return multiple values broadening its usability. The new proposed feature Async Streams in C# 8 remove the scalar result limitation and allows the async method to returns multiple results. This changes will make the async pattern more flexible so that you can retrieve data in lazy asynchronous sequence from the database or you can download data from in an asynchronous sequence that returns the data in chunks when they become available.<\/p>\n<h2><a name=\"_Toc500069573\"><\/a>Range syntax<\/h2>\n<p>It would be nice if we could specify a sub range as slice of an array with a range syntax. For example, if we want to get from one to three from one array. It is added a type Index, which can be used for indexing. You can create one from an int that counts from the beginning, or with a prefix ^ operator that counts from the end (image 2).<\/p>\n<figure id=\"attachment_8815\" aria-describedby=\"caption-attachment-8815\" style=\"width: 760px\" class=\"wp-caption alignnone\"><img loading=\"lazy\" decoding=\"async\" class=\"size-large wp-image-8815\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-2-Range-syntax-1024x578.png\" alt=\"Image 2 - Range syntax\" width=\"760\" height=\"429\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-2-Range-syntax-1024x578.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-2-Range-syntax-300x169.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-2-Range-syntax-768x433.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-2-Range-syntax.png 1372w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><figcaption id=\"caption-attachment-8815\" class=\"wp-caption-text\">Image 2 &#8211; Range syntax<\/figcaption><\/figure>\n<p>It is also introduced a Range type, which consists of two Indexes, one for the start and one for the end, and can be written with a x..y range expression. You can then index with a Range in order to produce a slice.<\/p>\n<p>&nbsp;<\/p>\n<p class=\"green\"><span class=\"ion-info\">More Info<\/span>If you would like to learn more about what is the story behind containers and what drives or the needs for it, we will know why companies moved from traditional solution architecture to Microservices and how this put containers as the perfect solution for running them, we will get quick intro to clear some definitions, tools and keywords related to this ecosystem, for example, we will understand what is the different between VM, Container and Hyper-V Container, why we would prefer container over VM and when the VM is better, we will understand the different between container and image and know the life cycle of creating a new image and why I do that, like adding more layers to the base image, push that to container images registry on the cloud, then pull that from the registry to anywhere to have a new container. We will understand also different technologies and services around container, like Docker, Docker Swarm, Kubernetes, Azure Container Services (ACS), Azure Container Registry, etc.- have a look at this post &#8211; have a look at the <a href=\"https:\/\/mohamedradwan.com\/2018\/04\/17\/containers-the-perfect-solution-for-running-microservices\/\"><strong>this post<\/strong><\/a><\/p>\n<p>&nbsp;<\/p>\n<h2><a name=\"_Toc500069574\"><\/a>Recursive patterns<\/h2>\n<p>An awesome feature, giving you the flexibility to test data against a sequence of conditions and perform further computations based on the conditions met (image 3).<\/p>\n<figure id=\"attachment_8816\" aria-describedby=\"caption-attachment-8816\" style=\"width: 760px\" class=\"wp-caption alignnone\"><img loading=\"lazy\" decoding=\"async\" class=\"size-large wp-image-8816\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-3-Recursive-patterns-1024x578.png\" alt=\"Image 3 - Recursive patterns\" width=\"760\" height=\"429\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-3-Recursive-patterns-1024x578.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-3-Recursive-patterns-300x169.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-3-Recursive-patterns-768x433.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-3-Recursive-patterns.png 1372w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><figcaption id=\"caption-attachment-8816\" class=\"wp-caption-text\">Image 3 &#8211; Recursive patterns<\/figcaption><\/figure>\n<p>Switch expressions are added, which are sort of a spiffed up version of switches that are an expression form. An example of the same code from the image 3 but written with switch expressions is displayed on the image 4.<\/p>\n<p>&nbsp;<\/p>\n<figure id=\"attachment_8817\" aria-describedby=\"caption-attachment-8817\" style=\"width: 760px\" class=\"wp-caption alignnone\"><img loading=\"lazy\" decoding=\"async\" class=\"size-large wp-image-8817\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-4-Switch-expressions-1024x578.png\" alt=\"Image 4 - Switch expressions\" width=\"760\" height=\"429\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-4-Switch-expressions-1024x578.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-4-Switch-expressions-300x169.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-4-Switch-expressions-768x433.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-4-Switch-expressions.png 1372w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><figcaption id=\"caption-attachment-8817\" class=\"wp-caption-text\">Image 4 &#8211; Switch expressions<\/figcaption><\/figure>\n<h2><a name=\"_Toc500069575\"><\/a>Implicitly typed new \u2013 expressions<\/h2>\n<p>Implicitly typed new \u2013 expressions &#8211; it enables the developer to omit the class name in a constructor when it can be safely inferred. In our example, we have several arrays of persons, and the type is repeated each time, although I am in a context where the type is clear (image 5).<\/p>\n<figure id=\"attachment_8818\" aria-describedby=\"caption-attachment-8818\" style=\"width: 760px\" class=\"wp-caption alignnone\"><img loading=\"lazy\" decoding=\"async\" class=\"size-large wp-image-8818\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-5-Implicitly-typed-new-expressions-before-1024x578.png\" alt=\"Image 5 - Implicitly typed new expressions before\" width=\"760\" height=\"429\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-5-Implicitly-typed-new-expressions-before-1024x578.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-5-Implicitly-typed-new-expressions-before-300x169.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-5-Implicitly-typed-new-expressions-before-768x433.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-5-Implicitly-typed-new-expressions-before.png 1372w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><figcaption id=\"caption-attachment-8818\" class=\"wp-caption-text\">Image 5 &#8211; Implicitly typed new expressions before<\/figcaption><\/figure>\n<p>With this new feature, we can avoid this repeating, as shown in the image 6.<\/p>\n<p>&nbsp;<\/p>\n<figure id=\"attachment_8819\" aria-describedby=\"caption-attachment-8819\" style=\"width: 760px\" class=\"wp-caption alignnone\"><img loading=\"lazy\" decoding=\"async\" class=\"size-large wp-image-8819\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-6-Implicitly-typed-new-expressions-after-1024x578.png\" alt=\"Image 6 - Implicitly typed new expressions after\" width=\"760\" height=\"429\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-6-Implicitly-typed-new-expressions-after-1024x578.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-6-Implicitly-typed-new-expressions-after-300x169.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-6-Implicitly-typed-new-expressions-after-768x433.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-6-Implicitly-typed-new-expressions-after.png 1372w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><figcaption id=\"caption-attachment-8819\" class=\"wp-caption-text\">Image 6 &#8211; Implicitly typed new expressions after<\/figcaption><\/figure>\n<h2><a name=\"_Toc500069576\"><\/a>Default interface members<\/h2>\n<p>Feature that make it easier to evolve interfaces. Once you published an interface, you are already locked in because if you add another member to it. Your implements will break. We are now adding the ability to add members actually with a method body. Which is little unusual for interfaces, but it is going to be really useful. Because existing implementers like console.log can get the default implementation without having to change (image 7).<\/p>\n<figure id=\"attachment_8820\" aria-describedby=\"caption-attachment-8820\" style=\"width: 760px\" class=\"wp-caption alignnone\"><img loading=\"lazy\" decoding=\"async\" class=\"size-large wp-image-8820\" src=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-7-Default-Interface-Members-1024x578.png\" alt=\"Image 7 - Default Interface Members\" width=\"760\" height=\"429\" srcset=\"https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-7-Default-Interface-Members-1024x578.png 1024w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-7-Default-Interface-Members-300x169.png 300w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-7-Default-Interface-Members-768x433.png 768w, https:\/\/mohamedradwan.com\/wp-content\/uploads\/2019\/01\/Image-7-Default-Interface-Members.png 1372w\" sizes=\"(max-width: 760px) 100vw, 760px\" \/><figcaption id=\"caption-attachment-8820\" class=\"wp-caption-text\">Image 7 &#8211; Default Interface Members<\/figcaption><\/figure>\n<h2><a name=\"_Toc500069577\"><\/a>Conclusion<\/h2>\n<p>There are many new features already in the works for C# 8. This post does not list all of them.<br \/>\nOf course, other new features not mentioned in the post might be added to the language as well. With all that in mind. You should regard the information in this article only as an interesting glimpse into the potential future of the language.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Introduction Null reference types Async streams Range syntax Recursive patterns &hellip;<\/p>\n<p class=\"read-more\"> <a class=\"ast-button\" href=\"https:\/\/mohamedradwan.com\/2019\/01\/13\/whats-new-in-c-8-0\/\"> <span class=\"screen-reader-text\">What\u2019s new in C# 8.0<\/span> Read More<\/a><\/p>\n","protected":false},"author":1,"featured_media":9157,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"site-sidebar-layout":"default","site-content-layout":"default","ast-global-header-display":"","ast-banner-title-visibility":"","ast-main-header-display":"","ast-hfb-above-header-display":"","ast-hfb-below-header-display":"","ast-hfb-mobile-header-display":"","site-post-title":"","ast-breadcrumbs-content":"","ast-featured-img":"","footer-sml-layout":"","theme-transparent-header-meta":"","adv-header-id-meta":"","stick-header-meta":"","header-above-stick-meta":"","header-main-stick-meta":"","header-below-stick-meta":"","footnotes":""},"categories":[16,19],"tags":[122,944],"_links":{"self":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts\/8811"}],"collection":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/comments?post=8811"}],"version-history":[{"count":5,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts\/8811\/revisions"}],"predecessor-version":[{"id":9414,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts\/8811\/revisions\/9414"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/media\/9157"}],"wp:attachment":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/media?parent=8811"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/categories?post=8811"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/tags?post=8811"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}
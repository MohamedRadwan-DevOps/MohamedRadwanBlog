{"id":1063,"date":"2011-11-11T06:41:40","date_gmt":"2011-11-11T06:41:40","guid":{"rendered":"https:\/\/mohamedradwan.com\/?p=1063"},"modified":"2011-11-11T06:41:40","modified_gmt":"2011-11-11T06:41:40","slug":"devmagicfake-become-very-easy-by-using-repository-pattern","status":"publish","type":"post","link":"https:\/\/mohamedradwan.com\/2011\/11\/11\/devmagicfake-become-very-easy-by-using-repository-pattern\/","title":{"rendered":"DevMagicFake become very easy by using Repository Pattern"},"content":{"rendered":"<hr\/>\n<p>One of the best pattern I used is <strong>Repository Pattern<\/strong>, for more information see this <a title=\"RepositoryPattern\" href=\"http:\/\/martinfowler.com\/eaaCatalog\/repository.html\" target=\"_blank\">link<\/a>, it helps me to apply the PI of the DDD and it fit in Layered architecture of DDD, I made a big research against using Generic Repository as my\u00a0previous\u00a0project or vs.Specific Repository? \u00a0as I saw too much in the community, and after details\u00a0research\u00a0I decide to use combine of both for many\u00a0reasons, \u00a0this will help me reuse the code but with \u00a0more control than just only Generic Repository, any way I will not dig more about <strong>Repository Pattern<\/strong> I just need to clue my idea so you can get my point of the next explanation I will provide about <a title=\"DevMagicFake\" href=\"https:\/\/mohamedradwan.com\/category\/dev-magic-fake\/\" target=\"_blank\">DevMagicFake<\/a><\/p>\n<p>Now DevMagicFake implement the <strong>Repository Pattern\u00a0<\/strong>and this will help us very well in to reduce the\u00a0thrown\u00a0or\u00a0maintenance\u00a0code with DevMagicFake as we do before, because in real development we really call the method that we need from our real repository<\/p>\n<p>By using IRepository interface which will be\u00a0implemented\u00a0by DevMagicFake and real repository, so no need to throw all faking code that used by DevMagicFake, unless some code like generating object with data that of course\u00a0will not \u00a0existing in IRepository interface<\/p>\n<p>Here is the IRepository interface<\/p>\n<p>[sourcecode language=&#8221;csharp&#8221;]<br \/>\nusing System;<br \/>\nusing System.Collections.Generic;<br \/>\nusing System.Linq.Expressions;<\/p>\n<p>public interface IRepository&lt;T&gt; where T : class<br \/>\n{<\/p>\n<p>    T Add(T entity);<br \/>\n    T Get(Expression&lt;Func&lt;T, bool&gt;&gt; where);<br \/>\n    IEnumerable&lt;T&gt; GetAll();<br \/>\n    T GetByCode(string code);<br \/>\n    T GetById(long id);<br \/>\n    IEnumerable&lt;T&gt; GetMany(Expression&lt;Func&lt;T, bool&gt;&gt; where);<br \/>\n    void Remove(T entity);<br \/>\n    void Remove(Expression&lt;Func&lt;T, bool&gt;&gt; where);<\/p>\n<p>}<br \/>\n[\/sourcecode]<\/p>\n<p>Here how we will use it in our controller, as we can see the controller will take a prameter of type IVendorRepository which is\u00a0Specific\u00a0Repository that implment IRepository interface<\/p>\n<p>[sourcecode language=&#8221;csharp&#8221;]<br \/>\npublic class VendorController: Controller<br \/>\n    {<br \/>\n        private IVendorRepository  vendorRepository;<\/p>\n<p>        public VendorController (IVendorRepository  vendorRepository)<br \/>\n        {<br \/>\n            this. vendorRepository = vendorRepository;<br \/>\n        }<\/p>\n<p> public ActionResult List(VendorListModel vendorListModel)<br \/>\n        {<br \/>\n            var vendors = this.repository.GetAll();<br \/>\n\t        var vendors2 = this.repository.GetMany(v=&gt;v.Code &gt; 50)<br \/>\n            .ToList();<\/p>\n<p>            \/\/ REMOVEFAKE:FakeNote<br \/>\n            \/\/ Begin Faking<br \/>\n \t        var generatedVendors = ((FakeRepository&lt;Vendor&gt;)<br \/>\n             vendorRepository).Create(10);<\/p>\n<p>            \/\/ End Faking<br \/>\n        }<br \/>\n[\/sourcecode]<\/p>\n<p><span style=\"color:#ff0000;\">Note: this feature not released yet, so if anyone need to use it, he will need to download the latest\u00a0reversion\u00a0of the\u00a0project\u00a0from CodePlex and just make a local build on his machine.<\/span><\/p>\n<p>Remember,\u00a0we will use any IoC or Dependency Injection to inject DevMagicFake or real\u00a0repository or Mocking\u00a0at the run time, this depend on the working stage, if its Faking, Testing, Development or Real stage<\/p>\n<p>So now we are not only reduce the faking code that produced by DevMagicFake but we also transform\u00a0this faking code into real development code which will\u00a0enhance\u00a0our productivity , we also control the faking code by using the <a title=\"FakeSnippet\" href=\"https:\/\/mohamedradwan.com\/2011\/11\/10\/1031\/\" target=\"_blank\">faking snippet<\/a>\u00a0 so we can track and trace any faking or\u00a0debts\u00a0code at anytime!<\/p>\n<p>Thanks<\/p>\n","protected":false},"excerpt":{"rendered":"<p>One of the best pattern I used is Repository Pattern, &hellip;<\/p>\n<p class=\"read-more\"> <a class=\"ast-button\" href=\"https:\/\/mohamedradwan.com\/2011\/11\/11\/devmagicfake-become-very-easy-by-using-repository-pattern\/\"> <span class=\"screen-reader-text\">DevMagicFake become very easy by using Repository Pattern<\/span> Read More<\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"site-sidebar-layout":"default","site-content-layout":"default","ast-global-header-display":"","ast-banner-title-visibility":"","ast-main-header-display":"","ast-hfb-above-header-display":"","ast-hfb-below-header-display":"","ast-hfb-mobile-header-display":"","site-post-title":"","ast-breadcrumbs-content":"","ast-featured-img":"","footer-sml-layout":"","theme-transparent-header-meta":"","adv-header-id-meta":"","stick-header-meta":"","header-above-stick-meta":"","header-main-stick-meta":"","header-below-stick-meta":"","footnotes":""},"categories":[16,22],"tags":[],"_links":{"self":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts\/1063"}],"collection":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/comments?post=1063"}],"version-history":[{"count":0,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/posts\/1063\/revisions"}],"wp:attachment":[{"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/media?parent=1063"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/categories?post=1063"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/mohamedradwan.com\/wp-json\/wp\/v2\/tags?post=1063"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}